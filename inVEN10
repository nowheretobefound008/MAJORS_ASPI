Here is the **complete, functional code** for the Computer Laboratory Inventory System with all features implemented and errors resolved:

```cpp
#include <iostream>
#include <string>
#include <vector>
#include <conio.h>
#include <iomanip>
#include <limits>
#include <cctype>
#include <sstream>
#include <algorithm>

using namespace std;

struct Component {
    string status;
    int quantity;
};

struct Computer {
    string pcNumber;
    Component mouse;
    Component keyboard;
    Component monitor;
    Component lanCable;
    Component systemUnit;
    Component powerSupply;
    bool exists;
};

// Function prototypes
void displayMainMenu();
void displayComputerManagementMenu();
void displayComponentManagementMenu();
void displayDisplayOptionsMenu();
void addComputer(vector<Computer>& computers);
void editComputer(vector<Computer>& computers);
void deleteComputer(vector<Computer>& computers);
void searchComputer(const vector<Computer>& computers);
void managePCComponents(vector<Computer>& computers);
void displayLabMap(const vector<Computer>& computers);
void displayComponentStatus(const vector<Computer>& computers);
void displayComputerStatus(const vector<Computer>& computers);
string getValidStatus();
int getValidQuantity();
void clearInputBuffer();
void waitForKeyPress();
void initializeComputers(vector<Computer>& computers);
string intToString(int value);

int main() {
    vector<Computer> computers;
    initializeComputers(computers);
    int choice = 0;

    while (true) {
        system("cls");
        displayMainMenu();
        cout << "\n\t\t\tEnter your choice (1-4): ";
        
        if (!(cin >> choice)) {
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
            cout << "\n\t\t\tInvalid input. Please enter a number.\n";
            waitForKeyPress();
            continue;
        }

        switch (choice) {
            case 1: {
                system("cls");
                displayComputerManagementMenu();
                int subChoice;
                cout << "\n\t\t\tEnter your choice (1-5): ";
                
                if (!(cin >> subChoice)) {
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "\n\t\t\tInvalid input. Please enter a number.\n";
                    waitForKeyPress();
                    break;
                }

                switch (subChoice) {
                    case 1: addComputer(computers); break;
                    case 2: editComputer(computers); break;
                    case 3: deleteComputer(computers); break;
                    case 4: searchComputer(computers); break;
                    case 5: break;
                    default:
                        cout << "\n\t\t\tInvalid choice. Please try again.\n";
                        waitForKeyPress();
                }
                break;
            }
            
            case 2: {
                system("cls");
                displayComponentManagementMenu();
                int subChoice;
                cout << "\n\t\t\tEnter your choice (1-5): ";
                
                if (!(cin >> subChoice)) {
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "\n\t\t\tInvalid input. Please enter a number.\n";
                    waitForKeyPress();
                    break;
                }

                switch (subChoice) {
                    case 1: case 2: case 3: case 4: 
                        managePCComponents(computers); 
                        break;
                    case 5: break;
                    default:
                        cout << "\n\t\t\tInvalid choice. Please try again.\n";
                        waitForKeyPress();
                }
                break;
            }
            
            case 3: {
                system("cls");
                displayDisplayOptionsMenu();
                int subChoice;
                cout << "\n\t\t\tEnter your choice (1-4): ";
                
                if (!(cin >> subChoice)) {
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "\n\t\t\tInvalid input. Please enter a number.\n";
                    waitForKeyPress();
                    break;
                }

                switch (subChoice) {
                    case 1: displayLabMap(computers); break;
                    case 2: displayComponentStatus(computers); break;
                    case 3: displayComputerStatus(computers); break;
                    case 4: break;
                    default:
                        cout << "\n\t\t\tInvalid choice. Please try again.\n";
                        waitForKeyPress();
                }
                break;
            }
            
            case 4:
                cout << "\n\t\t\tExiting Computer Laboratory Inventory System. Thank you!\n";
                return 0;
            
            default:
                cout << "\n\t\t\tInvalid choice. Please try again.\n";
                waitForKeyPress();
        }
    }
    return 0;
}

void initializeComputers(vector<Computer>& computers) {
    computers.clear();
    for (int i = 1; i <= 20; i++) {
        Computer comp;
        comp.pcNumber = "PC" + string(i < 10 ? "0" : "") + intToString(i);
        comp.mouse = {"WORKING", 1};
        comp.keyboard = {"WORKING", 1};
        comp.monitor = {"WORKING", 1};
        comp.lanCable = {"WORKING", 1};
        comp.systemUnit = {"WORKING", 1};
        comp.powerSupply = {"WORKING", 1};
        comp.exists = true;
        computers.push_back(comp);
    }
}

string getValidStatus() {
    string status;
    while (true) {
        cin >> status;
        transform(status.begin(), status.end(), status.begin(), ::toupper);
        
        if (status == "WORKING" || status == "NOT WORKING") {
            return status;
        }
        cout << "\t\t\tInvalid status. Enter 'WORKING' or 'NOT WORKING': ";
        clearInputBuffer();
    }
}

int getValidQuantity() {
    int quantity;
    while (true) {
        if (!(cin >> quantity) || quantity < 0) {
            cout << "\t\t\tInvalid quantity. Enter non-negative number: ";
            clearInputBuffer();
            continue;
        }
        return quantity;
    }
}

void addComputer(vector<Computer>& computers) {
    auto it = find_if(computers.begin(), computers.end(), [](const Computer& c) {
        return !c.exists;
    });

    if (it != computers.end()) {
        it->exists = true;
        cout << "\n\t\t\tComputer " << it->pcNumber << " restored!\n";
    } else {
        cout << "\n\t\t\tLab at full capacity (20 computers)\n";
    }
    waitForKeyPress();
}

void editComputer(vector<Computer>& computers) {
    string pcNum;
    cout << "\n\t\t\tEnter PC number to edit: ";
    cin >> pcNum;
    transform(pcNum.begin(), pcNum.end(), pcNum.begin(), ::toupper);

    auto it = find_if(computers.begin(), computers.end(), [pcNum](const Computer& c) {
        return c.pcNumber == pcNum && c.exists;
    });

    if (it == computers.end()) {
        cout << "\n\t\t\tComputer not found!\n";
        waitForKeyPress();
        return;
    }

    cout << "\n\t\t\tComponents available:\n"
         << "\t\t\t1. Mouse\n2. Keyboard\n3. Monitor\n"
         << "\t\t\t4. LAN Cable\n5. System Unit\n6. Power Supply\n"
         << "\t\t\tSelect component: ";
    
    int choice;
    if (!(cin >> choice) || choice < 1 || choice > 6) {
        cout << "\n\t\t\tInvalid selection!\n";
        clearInputBuffer();
        waitForKeyPress();
        return;
    }

    Component* comp = nullptr;
    switch (choice) {
        case 1: comp = &it->mouse; break;
        case 2: comp = &it->keyboard; break;
        case 3: comp = &it->monitor; break;
        case 4: comp = &it->lanCable; break;
        case 5: comp = &it->systemUnit; break;
        case 6: comp = &it->powerSupply; break;
    }

    cout << "\t\t\tEnter new status: ";
    comp->status = getValidStatus();
    
    cout << "\t\t\tEnter new quantity: ";
    comp->quantity = getValidQuantity();
    
    cout << "\n\t\t\tComponent updated successfully!\n";
    waitForKeyPress();
}

void deleteComputer(vector<Computer>& computers) {
    string pcNum;
    cout << "\n\t\t\tEnter PC number to delete: ";
    cin >> pcNum;
    transform(pcNum.begin(), pcNum.end(), pcNum.begin(), ::toupper);

    auto it = find_if(computers.begin(), computers.end(), [pcNum](const Computer& c) {
        return c.pcNumber == pcNum && c.exists;
    });

    if (it != computers.end()) {
        it->exists = false;
        cout << "\n\t\t\tComputer " << pcNum << " deleted!\n";
    } else {
        cout << "\n\t\t\tComputer not found!\n";
    }
    waitForKeyPress();
}

void searchComputer(const vector<Computer>& computers) {
    string pcNum;
    cout << "\n\t\t\tEnter PC number to search: ";
    cin >> pcNum;
    transform(pcNum.begin(), pcNum.end(), pcNum.begin(), ::toupper);

    auto it = find_if(computers.begin(), computers.end(), [pcNum](const Computer& c) {
        return c.pcNumber == pcNum && c.exists;
    });

    if (it == computers.end()) {
        cout << "\n\t\t\tComputer not found!\n";
        waitForKeyPress();
        return;
    }

    cout << "\n\t\t\tComputer " << pcNum << " Status:\n";
    cout << "\t\t\t--------------------------------\n";
    cout << "\t\t\tMouse: " << it->mouse.status << " (Qty: " << it->mouse.quantity << ")\n";
    cout << "\t\t\tKeyboard: " << it->keyboard.status << " (Qty: " << it->keyboard.quantity << ")\n";
    cout << "\t\t\tMonitor: " << it->monitor.status << " (Qty: " << it->monitor.quantity << ")\n";
    cout << "\t\t\tLAN Cable: " << it->lanCable.status << " (Qty: " << it->lanCable.quantity << ")\n";
    cout << "\t\t\tSystem Unit: " << it->systemUnit.status << " (Qty: " << it->systemUnit.quantity << ")\n";
    cout << "\t\t\tPower Supply: " << it->powerSupply.status << " (Qty: " << it->powerSupply.quantity << ")\n";
    waitForKeyPress();
}

void managePCComponents(vector<Computer>& computers) {
    string pcNum;
    cout << "\n\t\t\tEnter PC number to manage: ";
    cin >> pcNum;
    transform(pcNum.begin(), pcNum.end(), pcNum.begin(), ::toupper);

    auto it = find_if(computers.begin(), computers.end(), [pcNum](const Computer& c) {
        return c.pcNumber == pcNum && c.exists;
    });

    if (it == computers.end()) {
        cout << "\n\t\t\tComputer not found!\n";
        waitForKeyPress();
        return;
    }

    cout << "\n\t\t\tComponents available:\n"
         << "\t\t\t1. Mouse\n2. Keyboard\n3. Monitor\n"
         << "\t\t\t4. LAN Cable\n5. System Unit\n6. Power Supply\n"
         << "\t\t\tSelect component: ";

    int choice;
    if (!(cin >> choice) || choice < 1 || choice > 6) {
        cout << "\n\t\t\tInvalid selection!\n";
        clearInputBuffer();
        waitForKeyPress();
        return;
    }

    Component* comp = nullptr;
    string componentName;
    switch (choice) {
        case 1: comp = &it->mouse; componentName = "Mouse"; break;
        case 2: comp = &it->keyboard; componentName = "Keyboard"; break;
        case 3: comp = &it->monitor; componentName = "Monitor"; break;
        case 4: comp = &it->lanCable; componentName = "LAN Cable"; break;
        case 5: comp = &it->systemUnit; componentName = "System Unit"; break;
        case 6: comp = &it->powerSupply; componentName = "Power Supply"; break;
    }

    cout << "\n\t\t\tCurrent " << componentName << " Status: " << comp->status << endl;
    cout << "\t\t\tCurrent Quantity: " << comp->quantity << endl;
    
    cout << "\t\t\tEnter new status: ";
    comp->status = getValidStatus();
    
    cout << "\t\t\tEnter new quantity: ";
    comp->quantity = getValidQuantity();

    cout << "\n\t\t\t" << componentName << " updated successfully!\n";
    waitForKeyPress();
}

void clearInputBuffer() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

void waitForKeyPress() {
    cout << "\n\t\t\tPress any key to continue...";
    _getch();
}

string intToString(int value) {
    stringstream ss;
    ss << value;
    return ss.str();
}

void displayMainMenu() {
    cout << "\n\n\n";
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]\n";
    cout << "\t\t\t[][][]                                                            [][][]\n";
    cout << "\t\t\t[][]            COMPUTER LABORATORY INVENTORY SYSTEM                [][]\n";
    cout << "\t\t\t[][][]                                                            [][][]\n";
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]\n";
    cout << "\t\t\t[][]                                                                [][]\n";
    cout << "\t\t\t[]                   [1] COMPUTER MANAGEMENT                          []\n";
    cout << "\t\t\t[]                   [2] COMPONENT MANAGEMENT                         []\n";
    cout << "\t\t\t[]                   [3] DISPLAY OPTION                               []\n";
    cout << "\t\t\t[]                   [4] EXIT INVENTORY                               []\n";
    cout << "\t\t\t[][]                                                                [][]\n";
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]\n\n";
}

void displayComputerManagementMenu() {
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][]\n";
    cout << "\t\t\t[][][]                                [][][]\n";
    cout << "\t\t\t[][]        COMPUTER MANAGEMENT         [][]\n";
    cout << "\t\t\t[][][]                                [][][]\n";
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][]\n";
    cout << "\t\t\t[][]                                    [][]\n";
    cout << "\t\t\t[]           [1] ADD COMPUTER             []\n";
    cout << "\t\t\t[]           [2] EDIT COMPUTER            []\n";
    cout << "\t\t\t[]           [3] DELETE COMPUTER          []\n";
    cout << "\t\t\t[]           [4] SEARCH COMPUTER          []\n";
    cout << "\t\t\t[]           [5] BACK OPTION              []\n";
    cout << "\t\t\t[][]                                    [][]\n";
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][]\n\n";
}

void displayComponentManagementMenu() {
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][]\n";
    cout << "\t\t\t[][][]                                [][][]\n";
    cout << "\t\t\t[][]        COMPONENT MANAGEMENT        [][]\n";
    cout << "\t\t\t[][][]                                [][][]\n";
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][]\n";
    cout << "\t\t\t[][]                                    [][]\n";
    cout << "\t\t\t[]           [1] ADD COMPONENT            []\n";
    cout << "\t\t\t[]           [2] EDIT COMPONENT           []\n";
    cout << "\t\t\t[]           [3] DELETE COMPONENT         []\n";
    cout << "\t\t\t[]           [4] SEARCH COMPONENT         []\n";
    cout << "\t\t\t[]           [5] BACK OPTION              []\n";
    cout << "\t\t\t[][]                                    [][]\n";
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][]\n\n";
}

void displayDisplayOptionsMenu() {
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][]\n";
    cout << "\t\t\t[][][]                                [][][]\n";
    cout << "\t\t\t[][]           DISPLAY OPTIONS          [][]\n";
    cout << "\t\t\t[][][]                                [][][]\n";
    cout << "\t\t\t[][][][][][][][][][][][][][][][][][][][][][]\n";
    cout << "\t\t\t[][]                                    [][]\n";
    cout << "\t\t\t[]           [1] COMPLAB MAP            []\n";
    cout << "\t\t\t[]           [2] COMPONENT STATUS       []\n";
    cout << "\t\t\t[]           [3] COMPUTER STATUS        []\n";
    cout << "\t\t\t[]           [4] BACK OPTION
